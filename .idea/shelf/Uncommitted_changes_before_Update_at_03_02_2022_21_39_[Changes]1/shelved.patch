Index: src/main/java/by/volodko/epam/online_store/Demo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package by.volodko.epam.online_store;\r\n\r\n\r\nimport org.apache.logging.log4j.Level;\r\nimport org.apache.logging.log4j.LogManager;\r\nimport org.apache.logging.log4j.Logger;\r\n\r\npublic class Demo {\r\n    public static void main(String[] args) {\r\n      Logger logger = LogManager.getLogger();\r\n        logger.log(Level.INFO,\"hell\");\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/volodko/epam/online_store/Demo.java b/src/main/java/by/volodko/epam/online_store/Demo.java
--- a/src/main/java/by/volodko/epam/online_store/Demo.java	
+++ b/src/main/java/by/volodko/epam/online_store/Demo.java	
@@ -7,8 +7,7 @@
 
 public class Demo {
     public static void main(String[] args) {
-      Logger logger = LogManager.getLogger();
-        logger.log(Level.INFO,"hell");
+
     }
 
 
Index: src/main/java/by/volodko/epam/online_store/HelloServlet.java
===================================================================
diff --git a/src/main/java/by/volodko/epam/online_store/HelloServlet.java b/src/main/java/by/volodko/epam/online_store/HelloServlet.java
deleted file mode 100644
--- a/src/main/java/by/volodko/epam/online_store/HelloServlet.java	
+++ /dev/null	
@@ -1,38 +0,0 @@
-package by.volodko.epam.online_store;
-
-import java.io.*;
-import javax.servlet.ServletException;
-import javax.servlet.http.*;
-import javax.servlet.annotation.*;
-
-@WebServlet(name = "helloServlet", urlPatterns = {"/controller", "/do.*"})
-public class HelloServlet extends HttpServlet {
-
-
-    public void init() {
-
-    }
-
-    public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
-        response.setContentType("text/html");
-        String num = request.getParameter("input_n");
-        try {
-            int result = Integer.parseInt(num) * 5;
-            request.setAttribute("res", result);
-        } catch (NumberFormatException e ){
-            throw new RuntimeException(e);
-
-        }
-        request.getRequestDispatcher("/pages/result.jsp").forward(request, response);
-
-
-    }
-
-    @Override
-    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
-        super.doPost(req, resp);
-    }
-
-    public void destroy() {
-    }
-}
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>by.volodko.epam</groupId>\r\n    <artifactId>online_store</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n    <name>online_store</name>\r\n    <packaging>war</packaging>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <maven.compiler.target>1.8</maven.compiler.target>\r\n        <maven.compiler.source>1.8</maven.compiler.source>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.apache.logging.log4j</groupId>\r\n            <artifactId>log4j-core</artifactId>\r\n            <version>2.14.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.apache.logging.log4j</groupId>\r\n            <artifactId>log4j-api</artifactId>\r\n            <version>2.14.0</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>javax.servlet</groupId>\r\n            <artifactId>javax.servlet-api</artifactId>\r\n            <version>4.0.1</version>\r\n            <scope>provided</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.testng</groupId>\r\n            <artifactId>testng</artifactId>\r\n            <version>7.4.0</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.microsoft.sqlserver</groupId>\r\n            <artifactId>mssql-jdbc</artifactId>\r\n            <version>9.2.0.jre11</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->\r\n            <plugins>\r\n                <plugin>\r\n                    <artifactId>maven-clean-plugin</artifactId>\r\n                    <version>3.1.0</version>\r\n                </plugin>\r\n                <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->\r\n                <plugin>\r\n                    <artifactId>maven-resources-plugin</artifactId>\r\n                    <version>3.0.2</version>\r\n                </plugin>\r\n                <plugin>\r\n                    <artifactId>maven-compiler-plugin</artifactId>\r\n                    <version>3.8.0</version>\r\n                </plugin>\r\n                <plugin>\r\n                    <artifactId>maven-surefire-plugin</artifactId>\r\n                    <version>2.22.1</version>\r\n                </plugin>\r\n                <plugin>\r\n                    <artifactId>maven-war-plugin</artifactId>\r\n                    <version>3.2.2</version>\r\n                </plugin>\r\n                <plugin>\r\n                    <artifactId>maven-install-plugin</artifactId>\r\n                    <version>2.5.2</version>\r\n                </plugin>\r\n                <plugin>\r\n                    <artifactId>maven-deploy-plugin</artifactId>\r\n                    <version>2.8.2</version>\r\n                </plugin>\r\n            </plugins>\r\n        </pluginManagement>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.apache.maven.plugins</groupId>\r\n                <artifactId>maven-compiler-plugin</artifactId>\r\n                <configuration>\r\n                    <source>9</source>\r\n                    <target>9</target>\r\n                </configuration>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	
+++ b/pom.xml	
@@ -47,7 +47,7 @@
     </dependencies>
 
     <build>
-        <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
+        <pluginManagement>
             <plugins>
                 <plugin>
                     <artifactId>maven-clean-plugin</artifactId>
@@ -78,17 +78,16 @@
                     <artifactId>maven-deploy-plugin</artifactId>
                     <version>2.8.2</version>
                 </plugin>
-            </plugins>
-        </pluginManagement>
-        <plugins>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-compiler-plugin</artifactId>
-                <configuration>
-                    <source>9</source>
-                    <target>9</target>
-                </configuration>
-            </plugin>
-        </plugins>
+
+                <plugin>
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-compiler-plugin</artifactId>
+                    <configuration>
+                        <source>9</source>
+                        <target>9</target>
+                    </configuration>
+                </plugin>
+            </plugins>
+        </pluginManagement>
     </build>
 </project>
\ No newline at end of file
Index: src/main/java/by/volodko/epam/online_store/model/entity/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/volodko/epam/online_store/model/entity/User.java b/src/main/java/by/volodko/epam/online_store/model/entity/User.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/by/volodko/epam/online_store/model/entity/User.java	
@@ -0,0 +1,246 @@
+package by.volodko.epam.online_store.model.entity;
+
+public class User {
+    private long userId;
+    private String login;
+    private String password;
+    private String name;
+    private String surname;
+    private String email;
+    private String phoneNumber;
+    private String birthdayDate;
+    private String comment;
+    private Role role;
+    private Status status;
+    private UserDiscount discount;
+
+    public User() {
+    }
+
+    public long getUserId() {
+        return userId;
+    }
+
+    public void setUserId(long userId) {
+        this.userId = userId;
+    }
+
+    public String getLogin() {
+        return login;
+    }
+
+    public void setLogin(String login) {
+        this.login = login;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getSurname() {
+        return surname;
+    }
+
+    public void setSurname(String surname) {
+        this.surname = surname;
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public String getPhoneNumber() {
+        return phoneNumber;
+    }
+
+    public void setPhoneNumber(String phoneNumber) {
+        this.phoneNumber = phoneNumber;
+    }
+
+    public String getBirthdayDate() {
+        return birthdayDate;
+    }
+
+    public void setBirthdayDate(String birthdayDate) {
+        this.birthdayDate = birthdayDate;
+    }
+
+    public String getComment() {
+        return comment;
+    }
+
+    public void setComment(String comment) {
+        this.comment = comment;
+    }
+
+    public Role getRole() {
+        return role;
+    }
+
+    public void setRole(Role role) {
+        this.role = role;
+    }
+
+    public Status getStatus() {
+        return status;
+    }
+
+    public void setStatus(Status status) {
+        this.status = status;
+    }
+
+    public UserDiscount getDiscount() {
+        return discount;
+    }
+    public void setDiscount(UserDiscount discount) {
+        this.discount = discount;
+    }
+
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        User user = (User) o;
+
+        if (userId != user.userId) return false;
+        if (login != null ? !login.equals(user.login) : user.login != null) return false;
+        if (password != null ? !password.equals(user.password) : user.password != null) return false;
+        if (name != null ? !name.equals(user.name) : user.name != null) return false;
+        if (surname != null ? !surname.equals(user.surname) : user.surname != null) return false;
+        if (email != null ? !email.equals(user.email) : user.email != null) return false;
+        if (phoneNumber != null ? !phoneNumber.equals(user.phoneNumber) : user.phoneNumber != null) return false;
+        if (birthdayDate != null ? !birthdayDate.equals(user.birthdayDate) : user.birthdayDate != null) return false;
+        if (comment != null ? !comment.equals(user.comment) : user.comment != null) return false;
+        if (role != user.role) return false;
+        if (status != user.status) return false;
+        return discount == user.discount;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = (int) (userId ^ (userId >>> 32));
+        result = 31 * result + (login != null ? login.hashCode() : 0);
+        result = 31 * result + (password != null ? password.hashCode() : 0);
+        result = 31 * result + (name != null ? name.hashCode() : 0);
+        result = 31 * result + (surname != null ? surname.hashCode() : 0);
+        result = 31 * result + (email != null ? email.hashCode() : 0);
+        result = 31 * result + (phoneNumber != null ? phoneNumber.hashCode() : 0);
+        result = 31 * result + (birthdayDate != null ? birthdayDate.hashCode() : 0);
+        result = 31 * result + (comment != null ? comment.hashCode() : 0);
+        result = 31 * result + (role != null ? role.hashCode() : 0);
+        result = 31 * result + (status != null ? status.hashCode() : 0);
+        result = 31 * result + (discount != null ? discount.hashCode() : 0);
+        return result;
+    }
+
+    @Override
+    public String toString() {
+        final StringBuilder sb = new StringBuilder("User{");
+        sb.append("userId=").append(userId);
+        sb.append(", login='").append(login).append('\'');
+        sb.append(", password='").append(password).append('\'');
+        sb.append(", name='").append(name).append('\'');
+        sb.append(", surname='").append(surname).append('\'');
+        sb.append(", email='").append(email).append('\'');
+        sb.append(", phoneNumber='").append(phoneNumber).append('\'');
+        sb.append(", birthdayDate='").append(birthdayDate).append('\'');
+        sb.append(", comment='").append(comment).append('\'');
+        sb.append(", role=").append(role);
+        sb.append(", status=").append(status);
+        sb.append(", discount=").append(discount);
+        sb.append('}');
+        return sb.toString();
+    }
+
+
+    public static class UserBuilder {
+        private User user;
+
+        public UserBuilder() {
+            user = new User();
+        }
+
+        public User build() {
+            return user;
+        }
+
+        public UserBuilder setId(long id) {
+            user.userId = id;
+            return this;
+        }
+
+        public UserBuilder setLogin(String login) {
+            user.login = login;
+            return this;
+        }
+
+        public UserBuilder setEmail(String email) {
+            user.email = email;
+            return this;
+        }
+
+        public UserBuilder setPassword(String password) {
+            user.password = password;
+            return this;
+        }
+
+        public UserBuilder setName(String name) {
+            user.name = name;
+            return this;
+        }
+
+        public UserBuilder setLastName(String surName) {
+            user.surname = surName;
+            return this;
+        }
+
+        public UserBuilder setPhone(String phone) {
+            user.phoneNumber = phone;
+            return this;
+        }
+
+
+        public UserBuilder setBirthdayDate(String birthday) {
+            user.birthdayDate = birthday;
+            return this;
+        }
+
+        public UserBuilder setComment(String comment) {
+            user.comment = comment;
+            return this;
+        }
+
+        public UserBuilder setStatus(Status status) {
+            user.status = status;
+            return this;
+        }
+
+        public UserBuilder setRole(Role role) {
+            user.role = role;
+            return this;
+        }
+        public UserBuilder setDiscount (UserDiscount discount){
+            user.discount = discount;
+            return this;
+        }
+
+    }
+}
Index: src/main/java/by/volodko/epam/online_store/connection/ProxyConnection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/volodko/epam/online_store/connection/ProxyConnection.java b/src/main/java/by/volodko/epam/online_store/model/connection/ProxyConnection.java
rename from src/main/java/by/volodko/epam/online_store/connection/ProxyConnection.java
rename to src/main/java/by/volodko/epam/online_store/model/connection/ProxyConnection.java
--- a/src/main/java/by/volodko/epam/online_store/connection/ProxyConnection.java	
+++ b/src/main/java/by/volodko/epam/online_store/model/connection/ProxyConnection.java	
@@ -1,4 +1,4 @@
-package by.volodko.epam.online_store.connection;
+package by.volodko.epam.online_store.model.connection;
 
 import java.sql.*;
 import java.util.Map;
@@ -17,6 +17,15 @@
         connection.close();
     }
 
+
+    @Override
+    public void close() throws SQLException {
+        if (!connection.getAutoCommit()) {
+            connection.setAutoCommit(true);
+        }
+        ConnectionPool.getInstance().releaseConnection(this);
+    }
+
     @Override
     public Statement createStatement() throws SQLException {
         return connection.createStatement();
@@ -58,13 +67,6 @@
 
     }
 
-    @Override
-    public void close() throws SQLException {
-        if (!connection.getAutoCommit()) {
-            connection.setAutoCommit(true);
-        }
-        ConnectionPool.getInstance().releaseConnection(this);
-    }
 
     @Override
     public boolean isClosed() throws SQLException {
Index: src/main/java/by/volodko/epam/online_store/connection/ConnectionFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/volodko/epam/online_store/connection/ConnectionFactory.java b/src/main/java/by/volodko/epam/online_store/model/connection/ConnectionFactory.java
rename from src/main/java/by/volodko/epam/online_store/connection/ConnectionFactory.java
rename to src/main/java/by/volodko/epam/online_store/model/connection/ConnectionFactory.java
--- a/src/main/java/by/volodko/epam/online_store/connection/ConnectionFactory.java	
+++ b/src/main/java/by/volodko/epam/online_store/model/connection/ConnectionFactory.java	
@@ -1,4 +1,4 @@
-package by.volodko.epam.online_store.connection;
+package by.volodko.epam.online_store.model.connection;
 
 import by.volodko.epam.online_store.exception.ConnectionPoolException;
 import org.apache.logging.log4j.Level;
@@ -13,20 +13,25 @@
 import java.util.Properties;
 
 
-public class ConnectionFactory {
+class ConnectionFactory {
     private static final Logger logger = LogManager.getLogger();
     private static final String URL;
+    private static final String USER;
+    private static final String PASSWORD;
     private static final String DB_RESOURCE = "db.properties";
     private static final Properties connectionProperties = new Properties();
 
+
     static {
-        String driverName = null;
+        String driverName = "";
+
         try (InputStream inputStream = ConnectionFactory.class.getClassLoader().getResourceAsStream(DB_RESOURCE)) {
             connectionProperties.load(inputStream);
             driverName = (String) connectionProperties.get("driver");
             Class.forName(driverName);
             URL = (String) connectionProperties.get("url");
-
+            USER = (String) connectionProperties.get("user");
+            PASSWORD = (String) connectionProperties.get("password");
         } catch (ClassNotFoundException e) {
             logger.log(Level.ERROR, "Unable register driver: " + driverName, e);
             throw new RuntimeException("Unable register driver: " + driverName, e);
@@ -36,10 +41,13 @@
         }
     }
 
+    private ConnectionFactory() {
+    }
+
     static Connection getConnection() throws ConnectionPoolException {
         Connection connection = null;
         try {
-            connection = DriverManager.getConnection(URL, connectionProperties);
+            connection = DriverManager.getConnection(URL, USER, PASSWORD);
         } catch (SQLException e) {
             throw new ConnectionPoolException("Unable to connect to URL = " + URL, e);
         }
Index: src/main/webapp/WEB-INF/web.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\r\n         version=\"4.0\">\r\n    <error-page>\r\n        <exception-type>java.lang.RuntimeException</exception-type>\r\n        <location>/pages/error500.jsp</location>\r\n    </error-page>\r\n</web-app>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/WEB-INF/web.xml b/src/main/webapp/WEB-INF/web.xml
--- a/src/main/webapp/WEB-INF/web.xml	
+++ b/src/main/webapp/WEB-INF/web.xml	
@@ -3,8 +3,8 @@
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
          version="4.0">
-    <error-page>
-        <exception-type>java.lang.RuntimeException</exception-type>
-        <location>/pages/error500.jsp</location>
-    </error-page>
+<!--    <error-page>-->
+<!--        <exception-type>java.lang.RuntimeException</exception-type>-->
+<!--        <location>/pages/error500.jsp</location>-->
+<!--    </error-page>-->
 </web-app>
\ No newline at end of file
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/uiDesigner.xml	
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.png" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/vcs.xml	
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/main/resources/pool.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>poolsize=8\r\npoolsize_max=32\r\npoolsize_min=5
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/pool.properties b/src/main/resources/pool.properties
--- a/src/main/resources/pool.properties	
+++ b/src/main/resources/pool.properties	
@@ -1,3 +1,3 @@
-poolsize=8
+poolsize=15
 poolsize_max=32
-poolsize_min=5
\ No newline at end of file
+poolsize_min=8
\ No newline at end of file
Index: src/main/java/by/volodko/epam/online_store/connection/ConnectionPool.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/volodko/epam/online_store/connection/ConnectionPool.java b/src/main/java/by/volodko/epam/online_store/model/connection/ConnectionPool.java
rename from src/main/java/by/volodko/epam/online_store/connection/ConnectionPool.java
rename to src/main/java/by/volodko/epam/online_store/model/connection/ConnectionPool.java
--- a/src/main/java/by/volodko/epam/online_store/connection/ConnectionPool.java	
+++ b/src/main/java/by/volodko/epam/online_store/model/connection/ConnectionPool.java	
@@ -1,4 +1,4 @@
-package by.volodko.epam.online_store.connection;
+package by.volodko.epam.online_store.model.connection;
 
 import by.volodko.epam.online_store.exception.ConnectionPoolException;
 import org.apache.logging.log4j.Level;
@@ -19,32 +19,32 @@
 
 public class ConnectionPool {
     private static final Logger logger = LogManager.getLogger();
+    private static final String RESOURCE = "database/pool.properties";
+    private final static int DEFAULT_POOL_SIZE = 32;
+
     private static ConnectionPool instance;
     private static AtomicBoolean isInstanceHas = new AtomicBoolean();
     private static ReentrantLock lock = new ReentrantLock(true);
-    private static final String RESOURCE = "database/pool.properties";
+
     private BlockingQueue<ProxyConnection> freeConnections;
     private BlockingQueue<ProxyConnection> usedConnections;
-    private final static int DEFAULT_POOL_SIZE = 15;
     private int poolSize;
 
     private ConnectionPool() {
         Properties properties = new Properties();
         try (InputStream inputStream = ConnectionPool.class.getClassLoader().getResourceAsStream(RESOURCE)) {
             properties.load(inputStream);
-            poolSize = properties.get("poolsize") != null ? Integer.parseInt((String) properties.get("poolsize")) : DEFAULT_POOL_SIZE;
+           Object propertiesPoolSize = properties.get("poolsize");
+            poolSize = propertiesPoolSize != null ? Integer.parseInt((String) propertiesPoolSize) : DEFAULT_POOL_SIZE;
             freeConnections = new LinkedBlockingDeque<>(poolSize);
             usedConnections = new LinkedBlockingDeque<>();
             for (int i = 0; i < poolSize; i++) {
                 ProxyConnection proxyConnection = (ProxyConnection) ConnectionFactory.getConnection();
-                freeConnections.put(proxyConnection);
+                freeConnections.add(proxyConnection);
             }
         } catch (IOException e) {
             logger.log(Level.WARN, "IO Exception: ", e);
 
-        } catch (InterruptedException e) {
-            Thread.currentThread().interrupt();
-            logger.log(Level.ERROR, "The current thread is interrupted: ", e);
         } catch (ConnectionPoolException e) {
             logger.log(Level.ERROR, "Unable to create connection", e);
         }
@@ -83,15 +83,14 @@
     }
 
     public void releaseConnection(Connection connection) {
-        if (connection.getClass() == ProxyConnection.class) {
-            usedConnections.remove(connection);
+        if (connection.getClass() == ProxyConnection.class && usedConnections.remove(connection)) {
             try {
                 freeConnections.put((ProxyConnection) connection);
             } catch (InterruptedException e) {
                 Thread.currentThread().interrupt();
                 logger.log(Level.ERROR, "The current thread is interrupted: ", e);
-
             }
+
         } else {
             logger.log(Level.ERROR, "Wrong connection detected");
             throw new RuntimeException("Wrong connection detected");
@@ -106,9 +105,9 @@
             } catch (InterruptedException e) {
                 Thread.currentThread().interrupt();
                 logger.log(Level.ERROR, "The current thread is interrupted: ", e);
-         }   catch (SQLException e) {
-             logger.log(Level.ERROR, "Exception in method of closing connection", e);
-          }
+            } catch (SQLException e) {
+                logger.log(Level.ERROR, "Exception in method of closing connection", e);
+            }
             deregisterDrivers();
         }
 
